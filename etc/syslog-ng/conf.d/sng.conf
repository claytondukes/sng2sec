options {
    use_dns(yes);
    use_fqdn(yes);
    dns_cache(yes);
    dns_cache_size(10000);
    dns_cache_expire_failed(3600);
    keep-hostname (no); # use resolved original sender IP to hostname, ignore hostname retrieved from syslog message
    normalize-hostnames(yes); # lower case hostname
    chain-hostnames(no);
    create-dirs(yes);  # enable directory creation for destination files
    dir-group("root"); # group of the directories created by syslog-ng
    dir-owner("root"); # owner of the directories created by syslog-ng
    dir-perm(0755);# permission mask of directories created by syslog-ng
    owner("root"); # owner of the created file
    group("root"); # group of the created file
    perm(0644);    # permission mask of the file if it is created by syslog-ng
    stats-freq(0); # disable STATS messages
    stats-level(0); #  0 -> collects only statistics about the sources and destinations
};

source s_udp {
    udp(ip(0.0.0.0) port(514));
};

source s_internal {
    internal();
};

# Use pattern databases
parser pattern_db {
	db-parser( file("/etc/syslog-ng/patterndb.d/syslog-messages.xml") inject-mode(internal) );
};

#
# T E M P L A T E S
# -----------------
template t_syslog { template("${R_ISODATE} ${FULLHOST} ${FACILITY}.${PRIORITY} ${MSGHDR} ${MSG}\n"); };
template t_sec {
    template("${R_ISODATE} host=\"${HOST}\" ip=\"${SOURCEIP}\" eventid=\"${alarm.eventid}\" actionable=\"${alarm.actionable}\" alarm_type=\"${alarm.alarm_type}\" component=\"${alarm.component}\" correlation=\"${alarm.correlation}\" correlation_group=\"${alarm.correlation_group}\" message=\"${MSGHDR}${MSGONLY}\"\n");
};
# template dson { 
# template("$(format-json --scope selected_macros --scope nv_pairs --exclude TAGS --exclude DATE R_ISODATE=${R_ISODATE})\n");
# };

#
# D E S T I N A T I O N S
# -----------------------
destination d_syslog   { file("/var/log/syslog-${R_YEAR}-${R_MONTH}-${R_DAY}.log" template(t_syslog)); };
destination d_sec      { file("var/log/correlator/sec-input-events.log" template(t_sec)); };
#destination d_dson { file("/tmp/dson.txt" template(dson)); };

#
# F I L T E R S
# -------------

# Grab Cisco Mnemonics and write program name
filter f_cisco {
    match('(%[A-Za-z0-9\_\-]+-\d-[A-Za-z0-9\_\-]+):\s+(.*)' value("MSGONLY") type("pcre") flags("store-matches"));
};

filter f_sec {
    tags(".classifier.alarm");
};

filter f_syslog-ng {
    program("syslog-ng");
};

#
# R E W R I T E
# -------------
rewrite r_cisco {
        set("$1", value("PROGRAM") condition(filter(f_cisco)));
        set("$2", value("MSGONLY") condition(filter(f_cisco)));
};

#
# L O G
# -----
log { source(s_udp); rewrite(r_cisco); parser(pattern_db); };
log { source(s_internal); filter(f_sec); destination(d_sec); flags(final); };
log { source(s_udp); rewrite(r_cisco); destination(d_syslog); flags(final); };
log { source(s_internal); filter(f_default); filter(f_syslog-ng); destination(d_mesg); };
