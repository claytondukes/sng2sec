#
# Initialize constants and custom functions at SEC startup
#
type=Single
ptype=SubStr
pattern=SEC_STARTUP
desc=Set contants and custom functions at SEC startup
context=SEC_INTERNAL_EVENT
continue=TakeNext
action=assign %in_log      /var/log/correlator/sec-input-events.log; \
       assign %out_log     /var/log/correlator/sec-output-events.log; \
       assign %corr_log    /var/log/correlator/correlated.log; \
       assign %flapp_log   /var/log/correlator/flapping.log; \
       assign %unmatch_log /var/log/correlator/unmatch.log;

type=Single
ptype=SubStr
pattern=SEC_STARTUP
context=SEC_INTERNAL_EVENT
continue=TakeNext
desc=Load the Storable module and terminate if it is not found
action=eval %ret (require Storable); \
       if %ret ( logonly Storabe loaded ) else ( eval %o exit(1) )

type=Single
ptype=SubStr
pattern=SEC_STARTUP
context=SEC_INTERNAL_EVENT
desc=Restore all SEC contexts from /var/log/correlator/SEC_CONTEXTS on startup
action=lcall %ret -> ( sub { \
       my $ptr = $main::context_list{"SEC_INTERNAL_EVENT"}; \
       %main::context_list = \
         %{Storable::retrieve("/var/log/correlator/SEC_CONTEXTS")}; \
       $main::context_list{"SEC_INTERNAL_EVENT"} = $ptr; } )


#
# Dump SEC performance and debug data twice a day
#
type=Calendar
time=59 11,23 * * *
desc=Dump SEC performance and debug data
action=lcall %o -> ( sub { $main::sigreceived = 1; $main::dumpdata=1; } )

# Input event
# 2020-04-03T12:23:44+00:00 host="router-01.com" ip="1.2.3.4" eventid="syslog.cisco-link-updown" actionable="no" alarm_type="2" component="FastEthernet2/0/12" correlation="PairWithWindow-05" correlation_group="LINK-3-UPDOWN" message="%LINK-3-UPDOWN: Interface FastEthernet2/0/12, changed state to up"

#
# Match Input Events
#
rem=Parse and Match Events
type=Single
ptype=RegExp
pattern=^(?<DATE_TIME>\S+) host=\"(?<HOST>\S+)\" ip=\"(?<IP>\S+)\" eventid=\"(?<EVENTID>\S+)\" actionable=\"(?<ACTIONABLE>\S+)\" alarm_type=\"(?<ALARM_TYPE>\d+)\" component=\"(?<COMPONENT>.*)\" correlation=\"(?<CORRELATION>\S+)\" correlation_group=\"(?<CORRELATION_GROUP>\S+)\" message=\"(?<MSG>.*)\"$
varmap=SNG_EVENT
context=[ !_INTERNAL_EVENT ]
continue=TakeNext
desc=Parse input event
action=none

# Match Synthetic Event
rem=Parse and Match Synthetic SNG Events
type=Single
ptype=RegExp
pattern=^(?<FLAG>\S+) (?<TIMESTAMP>\S+) host=\"(?<HOST>\S+)\" ip=\"(?<IP>\S+)\" eventid=\"(?<EVENTID>\S+)\" actionable=\"(?<ACTIONABLE>\S+)\" alarm_type=\"(?<ALARM_TYPE>\d+)\" component=\"(?<COMPONENT>.*)\" correlation=\"(?<CORRELATION>\S+)\" correlation_group=\"(?<CORRELATION_GROUP>\S+)\" message=\"(?<MSG>.*)\"$
varmap=SYNTHETIC_SNG_EVENT
context=[ _INTERNAL_EVENT ]
continue=GoTo PROCESS_SYNTHETICS_EVENT
desc=Parse synthetic SNG Event
action=none


# Pass through event. Write event directly to output.
# Don't apply any correlation operation.
# ( In : Out ) ( 1:1 )
rem=Pass through event
type=Single
ptype=Cached
pattern=SNG_EVENT
context=SNG_EVENT :> ( sub { return $_[0]->{"CORRELATION"} eq "None"; } )
continue=EndMatch
desc=Pass through event
action=write %out_log $0

# Suppress duplicates for correlation "Deduplication-Full" and "Deduplication-Brief"
rem=Filter repeated instances of the same event with context set DedupFull or DedupBrief
type=Jump
ptype=Cached
pattern=SNG_EVENT
context= DedupFull|$+{HOST}|$+{EVENTID}|$+{ALARM_TYPE}|$+{COMPONENT}|$+{MSG} || \
         DedupBrief|$+{HOST}|$+{EVENTID}|$+{COMPONENT}
desc=Suppress events with existing context DedupFull or DedupBrief
continue=EndMatch


rem=Match event and create DedupFull context with lifetime 12h
type=Single
ptype=Cached
pattern=SNG_EVENT
context=SNG_EVENT :> ( sub { return $_[0]->{"CORRELATION"} eq "Deduplication-Full"; } )
continue=EndMatch
desc=Match event and create DedupFull context
action=write %out_log $0; \
       create DedupFull|$+{HOST}|$+{EVENTID}|$+{ALARM_TYPE}|$+{COMPONENT}|$+{MSG} 43200

rem=Match event and create DedupBrief context with lifetime 12h
type=Single
ptype=Cached
pattern=SNG_EVENT
context=SNG_EVENT :> ( sub { return $_[0]->{"CORRELATION"} eq "Deduplication-Brief"; } )
continue=EndMatch
desc=Match event and create DedupBrief context
action=write %out_log $0; \
       create DedupBrief|$+{HOST}|$+{EVENTID}|$+{COMPONENT} 43200

# Problem / Resolution 5 min correlation window
# ALARM_TYPE:
#   1 - Problem
#   2 - Resolution
rem=Problem/Resolution correlation rule with time window 5 minutes
type=PairWithWindow
ptype=Cached
pattern=SNG_EVENT
continue=EndMatch
context=SNG_EVENT :> ( sub { if (($_[0]->{"ALARM_TYPE"} eq "1") and \
                                     ($_[0]->{"CORRELATION"} eq "PairWithWindow-05")) { return 1;} \
                                 else { return 0; } } )
desc=Correlate Problem W05 $+{HOST} $+{CORRELATION_GROUP} $+{COMPONENT}
action=exists %cexists PROBLEM_NOT_RESOLVED|$+{HOST}|$+{CORRELATION_GROUP}|$+{COMPONENT}; \
       if %cexists ( none ) \
              else ( write %out_log $0; \
                     create PROBLEM_NOT_RESOLVED|$+{HOST}|$+{CORRELATION_GROUP}|$+{COMPONENT} 86400 )
ptype2=Cached
pattern2=SNG_EVENT
continue2=EndMatch
context2=SNG_EVENT :> ( sub { return $_[0]->{"ALARM_TYPE"} eq "2"; } ) && \
                          $+{HOST} %+{HOST} \
                          $+{COMPONENT} %+{COMPONENT} \
                          $+{CORRELATION_GROUP} %+{CORRELATION_GROUP} -> \
                          ( sub { return $_[0] eq $_[1] && $_[2] eq $_[3] && $_[4] eq $_[5]; } )
desc2=Correlate Resolution W05 %+{HOST} %+{CORRELATION_GROUP} %+{COMPONENT}
action2=write %corr_log %0 $0; \
        exists %cexists PROBLEM_NOT_RESOLVED|$+{HOST}|$+{CORRELATION_GROUP}|$+{COMPONENT}; \
        if %cexists ( write %out_log $0; delete PROBLEM_NOT_RESOLVED|$+{HOST}|$+{CORRELATION_GROUP}|$+{COMPONENT} ); \
        lcall %bf %+{ACTIONABLE} -> ( sub { $_[0] eq "yes" } ); \
        if %bf ( event 0 DETECT_FLAPPING %0 )
window=300

# Resolution Events
rem=Resolution (ALARM_TYPE = 2) Event Processing
type=Single
ptype=Cached
pattern=SNG_EVENT
continue=EndMatch
context=SNG_EVENT :> ( sub { if (($_[0]->{"ALARM_TYPE"} eq "2") and ($_[0]->{"CORRELATION_GROUP"} ne "None")) { return 1;} \
                                  else { return 0; } } )
desc=Resolution Event Processing
action=exists %cexists PROBLEM_NOT_RESOLVED|$+{HOST}|$+{CORRELATION_GROUP}|$+{COMPONENT}; \
       if %cexists ( write %out_log $0; \
                     delete PROBLEM_NOT_RESOLVED|$+{HOST}|$+{CORRELATION_GROUP}|$+{COMPONENT} ) \
       else ( none )

#  Synthetics Event Processing
label=PROCESS_SYNTHETICS_EVENT

# Flapp detection is performed only for events with flag ACTIONABLE = "yes"
rem=Flapp detection 5x within 1 hour
type=SingleWithThreshold
ptype=Cached
pattern=SYNTHETIC_SNG_EVENT
continue=EndMatch
context=SYNTHETIC_SNG_EVENT :> ( sub { return $_[0]->{"FLAG"} eq "DETECT_FLAPPING"; } )
desc=Flap detection 5x1h $+{HOST} $+{CORRELATION_GROUP} $+{COMPONENT}
action=lcall %clean_msg $0 -> ( sub { my $ret = $_[0]; \
                                      $ret =~ s/DETECT_FLAPPING //; \
                                      $ret =~ s/message=\"/message=\"\[FLAPPING:5:3600\] /; \
                                      $ret =~ s/^\S+ //; \
                                      return $ret;} ); \
       exists %cexists FLAPPING_DETECTED|$+{HOST}|$+{CORRELATION_GROUP}|$+{COMPONENT}; \
       if %cexists ( write %flapp_log %{.year}-%{.mon}-%{.mday}T%{.hmsstr}%{.tzoff2} Flapping already reported: $+{HOST} $+{EVENTID} $+{CORRELATION_GROUP} $+{COMPONENT} ) \
              else ( write %out_log %{.year}-%{.mon}-%{.mday}T%{.hmsstr}%{.tzoff2} %clean_msg; \
                     write %flapp_log %{.year}-%{.mon}-%{.mday}T%{.hmsstr}%{.tzoff2} Flapping detected for: $+{HOST} $+{EVENTID} $+{CORRELATION_GROUP} $+{COMPONENT}; \
                     create FLAPPING_DETECTED|$+{HOST}|$+{CORRELATION_GROUP}|$+{COMPONENT} 43200 )
window=3600
thresh=5
# End Synthetics Event Processing

# Save all context to file after shutdown
type=Single
ptype=SubStr
pattern=SEC_SHUTDOWN
context=SEC_INTERNAL_EVENT
desc=Save all SEC contexts into /var/log/correlator/SEC_CONTEXTS on shutdown
action=lcall %ret -> ( sub { \
       Storable::store(\%main::context_list, \
                       "/var/log/correlator/SEC_CONTEXTS"); } )

# Log all unmatched events.
# Exclude all sec internal events.
rem=Log All Unmatched Events
type=Single
ptype=RegExp
pattern=.*
context=[ !_INTERNAL_EVENT ]
desc=Log unmatched events
action=write %unmatch_log $0

# sec -detach -tail -conf=/tmp/correlator.conf -input=/var/log/correlator/sec-input-events.log -log=/var/log/correlator/sec.log -intevents -intcontexts -dumpfts -dump=/var/log/correlator/sec.dump -debug=4 -pid=/var/run/sec2.pid

# 2020-04-03T00:00:00+00:00 host="router-01.com" ip="1.2.89.76" eventid="syslog.cisco-link-updown" actionable="yes" alarm_type="1" component="FastEthernet0/4" correlation="PairWithWindow-05" correlation_group="LINK-3-UPDOWN" message="%LINK-3-UPDOWN: Interface FastEthernet0/4, changed state to down"
# 2020-04-03T00:00:00+00:00 host="router-01.com" ip="1.2.89.76" eventid="syslog.cisco-link-updown" actionable="yes" alarm_type="2" component="FastEthernet0/4" correlation="PairWithWindow-05" correlation_group="LINK-3-UPDOWN" message="%LINK-3-UPDOWN: Interface FastEthernet0/4, changed state to up"

